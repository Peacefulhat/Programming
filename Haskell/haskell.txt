                                            Haskell
                                        ----------------
                                        ----------------


What is functional programming ?
->In functional programming and specially in haskell we are intrested in pure
functions meaning functions in the mathematical definition that they have some
input some arguments and then have a result and nothing else.

Pure Functions:
->Pure functions are a fundamental concept in functional programming. They always produce the same output for the same input, have no side effects, and do not modify external state. This predictability makes code more reliable and easier to reason about.

Immutability:
->In functional programming, data is typically immutable, meaning that once a value is created, it cannot be changed. Instead of modifying data, new data structures are created with the desired changes.

First-Class and Higher-Order Functions:
->Functions in functional programming are first-class citizens, meaning they can be assigned to variables, passed as arguments to other functions, and returned as values from other functions. This allows for functions to be composed and used in more flexible ways.

Recursion:
->Functional programming often relies on recursion for repetitive tasks instead of using loops. Recursive functions can express many algorithms more concisely and elegantly.

Referential Transparency:
->Referential transparency means that a function's output is determined solely by its input, and you can replace a function call with its result without changing the program's behavior. This property facilitates optimization and reasoning about code.

Higher-Order Functions:
->Functional programming languages support higher-order functions, which can take other functions as arguments or return them as results. This allows for powerful abstractions and code reuse.

Function Composition:
->Functional programming encourages the composition of functions to create more complex functions. This can make code more modular and easier to understand.

Avoidance of Mutable State:
->Functional programming discourages the use of mutable variables and state changes. Instead, it promotes working with data immutably.

what is Haskell ?
->Haskell is a purely functional, statically typed programming language known for its strong type system and elegant syntax. It was first developed in the late 1980s by a group of researchers, including Simon Peyton Jones and Philip Wadler, and it was named after the logician Haskell Curry. Haskell has since gained popularity both in academia and industry for its unique features and the insights it offers into functional programming.

Here are some key features and characteristics of Haskell:

Purely Functional:
->Haskell is a purely functional programming language, which means that it strongly encourages and enforces the use of pure functions. In Haskell, functions do not have side effects, and data is typically immutable.

Static Typing:
->Haskell has a strong static type system, which is known for its expressive power. Types are checked at compile time, helping to catch many common programming errors before runtime.

Type Inference: Haskell supports type inference, which allows the compiler to deduce the types of expressions without requiring explicit type annotations. This can lead to more concise and readable code.

Lazy Evaluation: Haskell uses lazy evaluation, meaning that expressions are not evaluated until their values are actually needed. This can lead to more efficient and concise code in some cases.

Pattern Matching: Haskell provides powerful pattern matching capabilities for deconstructing data structures and making decisions based on their shape.

Type Classes: Haskell uses type classes to define ad-hoc polymorphism. Type classes are similar to interfaces in other languages and allow you to define operations that can work on different types.

High-Level Abstractions: Haskell encourages the use of high-level abstractions and provides powerful constructs for building them, making it well-suited for solving complex problems.

Monads: Haskell popularized the concept of monads, which are used to manage side effects in a purely functional language. Monads provide a way to sequence computations and encapsulate impure actions.

Rich Standard Library: Haskell comes with a rich standard library that includes modules for various programming tasks, making it suitable for a wide range of applications.

Haskell is often used in areas like research, formal methods, finance, and certain types of web development. It's also an excellent language for learning about functional programming concepts and type theory. If you're interested in learning Haskell, there are numerous resources, tutorials, and online courses availableto help you get started.

How to define a function in Haskell:
using an equation that specifies:
the function name(unique)
  the name of its arguments.
  the function body specifying what the function calculates.

  Tripling function in haskell:
  triple x = 3*x
function_name arguments = defination.(3*x)

  Applying functions in haskell.
  By specifying the function name and its arguments.
  (like calling function);
  triple 4 
  -- ={ applying triple}
  -- 3*4 
  -- {applying *}
  12 output;


  {{Note: Onece a type(kind of like a variable) is defined we can not change its value.the type value will not change throughout porgram and same goes for locally defined type that we can defined using "let"keyword}}

  function(Defination):

    Syntax: 
    name arg1 arg2 ... argn =<expr>
  
  function (application):
  Syntax:
  name arg1 arg2...argn.

  Types(basic): strictally typed and unmutable.
    Syntax:
    name::<type>
    eg:: x:: Integer
      x=1 
      y::Bool
      y=True
      z::Float
      z=3.14159
      
  Types(function):
    name::<type>-><type>->...<type> -> <return type>
    eg:
    in_range min max x = x>=min && x<=max
  
  functin(let bindings):
  in_range min max x= 
  let in_lower_bound =min<=x
      in_upper_bound =max>=x
  in 
  in_lower_bound&&in_upper_bound

